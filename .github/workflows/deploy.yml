name: Dev to Main CI/CD Pipeline
env:
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
on:
  push:
    branches:
      - dev  

jobs:
  merge-to-stage:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  

      - name: Set up Git
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"

      - name: Merge dev into stage
        run: |
          git checkout stage
          git merge dev --no-ff
          git push origin stage

  run-tests-on-stage:
    runs-on: ubuntu-latest
    needs: merge-to-stage
    strategy:
      matrix:
        python-version: ['3.10']

    steps:
      - name: Checkout stage branch
        uses: actions/checkout@v3

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Run pytest
        run: |
          pytest -v --disable-warnings

  merge-to-main:
    runs-on: ubuntu-latest
    needs: run-tests-on-stage
    if: success()
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Git
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"

      - name: Merge stage into main
        run: |
          git checkout main
          git merge origin/stage --no-ff
          git push origin main

  Deploy-Production:
    runs-on: ubuntu-latest
    needs: merge-to-main
    if: success()
    steps:
      - name: Checkout main branch
        uses: actions/checkout@v3
      - name: Install Vercel CLI
        run: npm install --global vercel@latest
      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}
      - name: Build Project Artifacts
        run: vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}
      - name: Deploy Project Artifacts to Vercel
        run: vercel deploy --prod --token=${{ secrets.VERCEL_TOKEN }}
